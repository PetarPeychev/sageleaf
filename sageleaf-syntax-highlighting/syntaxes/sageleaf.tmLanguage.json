{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "sageleaf",
  "patterns": [
    {
      "include": "#strings"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#native_blocks"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#generic_params"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#types"
    },
    {
      "include": "#literals"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.sageleaf",
          "match": "\\b(if|elif|else|fn|struct|union|import|from|as|and|or|not|match|case|return|for|in|while|break|continue|const)\\b"
        },
        {
          "name": "keyword.other.sageleaf",
          "match": "\\b(native)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.sageleaf",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.sageleaf",
              "match": "\\\\(n|t|r|\\\\|\"|0|.)"
            }
          ]
        }
      ]
    },
    "literals": {
      "patterns": [
        {
          "name": "constant.language.sageleaf",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.numeric.hex.sageleaf",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.binary.sageleaf",
          "match": "\\b0[bB][01]+\\b"
        },
        {
          "name": "constant.numeric.octal.sageleaf",
          "match": "\\b0[oO][0-7]+\\b"
        },
        {
          "name": "constant.numeric.float.sageleaf",
          "match": "\\b[0-9]+\\.[0-9]+([eE][+-]?[0-9]+)?\\b"
        },
        {
          "name": "constant.numeric.float.scientific.sageleaf",
          "match": "\\b[0-9]+[eE][+-]?[0-9]+\\b"
        },
        {
          "name": "constant.numeric.decimal.sageleaf",
          "match": "\\b([0-9]+|0)\\b"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.sageleaf",
          "begin": "//",
          "end": "$"
        }
      ]
    },
    "native_blocks": {
      "patterns": [
        {
          "name": "meta.embedded.block.c",
          "begin": "\\b(native)\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.sageleaf"
            }
          },
          "end": "\\}",
          "contentName": "source.c.embedded.sageleaf",
          "patterns": [
            {
              "include": "source.c"
            }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.range.sageleaf",
          "match": "(\\.\\.=|\\.\\.<)"
        },
        {
          "name": "keyword.operator.comparison.sageleaf",
          "match": "(==|!=|>=|<=|>|<)"
        },
        {
          "name": "keyword.operator.arrow.sageleaf",
          "match": "->"
        },
        {
          "name": "keyword.operator.arithmetic.sageleaf",
          "match": "(\\+|-|\\*|/|%)"
        },
        {
          "name": "keyword.operator.assignment.sageleaf",
          "match": "="
        },
        {
          "name": "keyword.operator.address.sageleaf",
          "match": "&"
        },
        {
          "name": "keyword.operator.dereference.sageleaf",
          "match": "\\*"
        },
        {
          "name": "punctuation.separator.period.sageleaf",
          "match": "\\."
        },
        {
          "name": "punctuation.separator.colon.sageleaf",
          "match": ":"
        },
        {
          "name": "punctuation.separator.semicolon.sageleaf",
          "match": ";"
        },
        {
          "name": "punctuation.separator.comma.sageleaf",
          "match": ","
        },
        {
          "name": "punctuation.brackets.round.sageleaf",
          "match": "[()]"
        },
        {
          "name": "punctuation.brackets.square.sageleaf",
          "match": "[\\[\\]]"
        },
        {
          "name": "punctuation.brackets.curly.sageleaf",
          "match": "[{}]"
        },
        {
          "name": "keyword.operator.apostrophe.sageleaf",
          "match": "'"
        },
        {
          "name": "variable.language.underscore.sageleaf",
          "match": "\\b_\\b"
        }
      ]
    },
    "generic_params": {
      "patterns": [
        {
          "name": "entity.name.type.parameter.sageleaf",
          "match": "'[A-Z][A-Za-z0-9_]*"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.primitive.sageleaf",
          "match": "\\b(i8|u8|i16|u16|i32|u32|i64|u64|usize|f32|f64|bool|str)\\b"
        }
      ]
    }
  },
  "scopeName": "source.sageleaf"
}